{"version":3,"file":"redaxios.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef Options\n * @property {string} [url] the URL to request\n * @property {string} [method=\"get\"] HTTP method, case-insensitive\n * @property {Headers} [headers] Request headers\n * @property {'text'|'json'|'stream'|'blob'|'arrayBuffer'|'formData'|'stream'} [responseType=\"text\"] An encoding to use for the response\n * @property {string} [auth] Authorization header value to send with the request\n * @property {string} [xsrfCookieName] Pass an Cross-site Request Forgery prevention cookie value as a header defined by `xsrfHeaderName`\n * @property {string} [xsrfHeaderName] The name of a header to use for passing XSRF cookies\n * @property {(status: number) => boolean} [validateStatus] Override status code handling (default: 200-399 is a success)\n * @property {Array<(body: any, headers: Headers) => any?>} [transformRequest] An array of transformations to apply to the outgoing request\n */\n\n/**\n * @typedef Headers\n * @type {{[name: string]: string}}\n */\n\n/**\n * @typedef Response\n * @property {Options} config the resolved request configuration\n * @property {FormData|string|object} [body] a body, optionally encoded, to send\n */\n\nexport default (function create(defaults) {\n\tdefaults = defaults || {};\n\n\t/**\n\t * Creates a request factory bound to the given HTTP method.\n\t * @param {string} method\n\t * @param {boolean} allowBody\n\t * @returns {(url: string, config?: Options, body?) => Promise<Response>}\n\t */\n\tfunction createMethod(method, allowBody) {\n\t\treturn (url, config, alt) => {\n\t\t\tlet data;\n\t\t\tif (allowBody) {\n\t\t\t\tdata = config;\n\t\t\t\tconfig = alt;\n\t\t\t}\n\t\t\tconfig = Object.assign({ method }, config);\n\t\t\treturn axios(url, data, config);\n\t\t};\n\t}\n\n\taxios.request = axios;\n\taxios.get = createMethod('get', false);\n\taxios.delete = createMethod('delete', false);\n\taxios.options = createMethod('options', false);\n\taxios.post = createMethod('post', true);\n\taxios.put = createMethod('put', true);\n\taxios.patch = createMethod('patch', true);\n\n\taxios.all = Promise.all;\n\taxios.spread = function(fn) {\n\t\treturn function (a) {\n\t\t\treturn fn.apply(this, a);\n\t\t};\n\t};\n\n\tfunction deepMerge(opts, overrides, lowerCase) {\n\t\tif (Array.isArray(opts)) {\n\t\t\treturn opts.concat(overrides);\n\t\t}\n\t\tif (overrides && typeof overrides == 'object') {\n\t\t\tlet out = {}, i;\n\t\t\tif (opts) {\n\t\t\t\tfor (i in opts) {\n\t\t\t\t\tlet key = lowerCase ? i.toLowerCase() : i;\n\t\t\t\t\tout[key] = opts[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i in overrides) {\n\t\t\t\tlet key = lowerCase ? i.toLowerCase() : i;\n\t\t\t\tif (key === 'headers') lowerCase = true;\n\t\t\t\tif (i in out) {\n\t\t\t\t\tout[key] = deepMerge(out[key], overrides[i], lowerCase);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout[key] = overrides[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn overrides;\n\t}\n\n\tfunction isOk(status) {\n\t\treturn (status/100|0) === 2;\n\t}\n\n\t/**\n\t * Issues a request.\n\t * @param {string} url the URL to fetch\n\t * @param {any} [data] request body to send\n\t * @param {Options} [config] configuration for the request\n\t * @returns {Promise<Response>}\n\t */\n\tfunction axios(url, data, config) {\n\t\tlet options = config;\n\t\tif (typeof url !== 'string') {\n\t\t\toptions = url;\n\t\t\turl = options.url;\n\t\t}\n\t\telse if (config === undefined) {\n\t\t\toptions = data;\n\t\t\tdata = undefined;\n\t\t}\n\t\toptions = deepMerge(defaults, options) || {};\n\n\t\tif (options.transformRequest) {\n\t\t\tfor (let i = 0; i < options.transformRequest.length; i++) {\n\t\t\t\tlet r = options.transformRequest[i](data, options.headers);\n\t\t\t\tif (r !== undefined) {\n\t\t\t\t\tdata = r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst customHeaders = {};\n\n\t\tif (data && typeof data === 'object') {\n\t\t\tdata = JSON.stringify(data);\n\t\t\tcustomHeaders['Content-Type'] = 'application/json';\n\t\t}\n\n\t\tif (options.xsrfCookieName) {\n\t\t\tlet parts = document.cookie.split(/ *[;=] */);\n\t\t\tfor (let i = 0; i < parts.length; i += 2) {\n\t\t\t\tif (parts[i] == options.xsrfCookieName) {\n\t\t\t\t\tcustomHeaders[options.xsrfHeaderName] = decodeURIComponent(parts[i+1]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (options.auth) {\n\t\t\tcustomHeaders.Authorization = options.auth;\n\t\t}\n\n\t\tconst response = {\n\t\t\tconfig\n\t\t};\n\t\treturn fetch(url, {\n\t\t\tmethod: options.method,\n\t\t\tbody: data,\n\t\t\theaders: deepMerge(options.headers, customHeaders, true)\n\t\t}).then((res) => {\n\t\t\tlet i;\n\t\t\tfor (i in res) {\n\t\t\t\tif (typeof res[i] != 'function') response[i] = res[i];\n\t\t\t}\n\t\t\tif (!(options.validateStatus || isOk)(res.status)) {\n\t\t\t\treturn Promise.reject(res);\n\t\t\t}\n\t\t\tconst withData = options.responseType === 'stream'\n\t\t\t\t? Promise.resolve(res.body)\n\t\t\t\t: res[options.responseType || 'text']();\n\t\t\treturn withData.then((data) => {\n\t\t\t\tresponse.data = data;\n\t\t\t\treturn response;\n\t\t\t});\n\t\t});\n\t}\n\n\taxios.CancelToken = self.AbortController || Object;\n\n\treturn axios;\n})();\n"],"names":["defaults","createMethod","method","allowBody","url","config","alt","data","axios","Object","assign","deepMerge","opts","overrides","lowerCase","Array","isArray","concat","i","out","toLowerCase","key","options","undefined","transformRequest","let","length","r","headers","customHeaders","JSON","stringify","xsrfCookieName","parts","document","cookie","split","xsrfHeaderName","decodeURIComponent","auth","Authorization","response","fetch","body","then","res","validateStatus","status","responseType","Promise","resolve","reject","request","get","delete","post","put","patch","all","spread","fn","a","apply","this","CancelToken","self","AbortController"],"mappings":"AAqCA,MAAe,SAAiBA,YAStBC,EAAaC,EAAQC,mBACrBC,EAAKC,EAAQC,OAChBC,SACAJ,IACHI,EAAOF,EACPA,EAASC,GAGHE,EAAMJ,EAAKG,EADlBF,EAASI,OAAOC,OAAO,QAAER,GAAUG,cAoB5BM,EAAUC,EAAMC,EAAWC,MAC/BC,MAAMC,QAAQJ,UACVA,EAAKK,OAAOJ,MAEhBA,GAAiC,iBAAbA,EAAuB,KAChCK,EAAVC,EAAM,MACNP,MACEM,KAAKN,EAETO,EADUL,EAAYI,EAAEE,cAAgBF,GAC7BN,EAAKM,OAGbA,KAAKL,EAAW,KAChBQ,EAAMP,EAAYI,EAAEE,cAAgBF,EAC5B,YAARG,IAAmBP,GAAY,GAElCK,EAAIE,GADDH,KAAKC,EACGR,EAAUQ,EAAIE,GAAMR,EAAUK,GAAIJ,GAGlCD,EAAUK,UAGhBC,SAEDN,WAcCL,EAAMJ,EAAKG,EAAMF,OACrBiB,EAAUjB,KACK,iBAARD,EAEVA,GADAkB,EAAUlB,GACIA,SAEKmB,IAAXlB,IACRiB,EAAUf,EACVA,OAAOgB,IAERD,EAAUX,EAAUX,EAAUsB,IAAY,IAE9BE,qBACNC,IAAIP,EAAI,EAAGA,EAAII,EAAQE,iBAAiBE,OAAQR,IAAK,KACrDS,EAAIL,EAAQE,iBAAiBN,GAAGX,EAAMe,EAAQM,cACxCL,IAANI,IACHpB,EAAOoB,OAKJE,EAAgB,MAElBtB,GAAwB,iBAATA,IAClBA,EAAOuB,KAAKC,UAAUxB,GACtBsB,EAAc,gBAAkB,oBAG7BP,EAAQU,uBACPC,EAAQC,SAASC,OAAOC,MAAM,YACzBlB,EAAI,EAAGA,EAAIe,EAAMP,OAAQR,GAAK,KAClCe,EAAMf,IAAMI,EAAQU,eAAgB,CACvCH,EAAcP,EAAQe,gBAAkBC,mBAAmBL,EAAMf,EAAE,UAMlEI,EAAQiB,OACXV,EAAcW,cAAgBlB,EAAQiB,UAGjCE,EAAW,QAChBpC,UAEMqC,MAAMtC,EAAK,CACjBF,OAAQoB,EAAQpB,OAChByC,KAAMpC,EACNqB,QAASjB,EAAUW,EAAQM,QAASC,GAAe,KACjDe,cAAMC,OACJ3B,MACCA,KAAK2B,EACY,mBAAVA,EAAI3B,KAAkBuB,EAASvB,GAAK2B,EAAI3B,WAE9CI,EAAQwB,yBAjEFC,UACa,IAAlBA,EAAO,IAAI,KAgEoBF,EAAIE,SAGA,WAAzBzB,EAAQ0B,aACtBC,QAAQC,QAAQL,EAAIF,MACpBE,EAAIvB,EAAQ0B,cAAgB,WACfJ,cAAMrC,UACrBkC,EAASlC,KAAOA,EACTkC,IAPAQ,QAAQE,OAAON,YAhIzB7C,EAAWA,GAAY,GAoBvBQ,EAAM4C,QAAU5C,EAChBA,EAAM6C,IAAMpD,EAAa,OAAO,GAChCO,EAAM8C,OAASrD,EAAa,UAAU,GACtCO,EAAMc,QAAUrB,EAAa,WAAW,GACxCO,EAAM+C,KAAOtD,EAAa,QAAQ,GAClCO,EAAMgD,IAAMvD,EAAa,OAAO,GAChCO,EAAMiD,MAAQxD,EAAa,SAAS,GAEpCO,EAAMkD,IAAMT,QAAQS,IACpBlD,EAAMmD,OAAS,SAASC,UAChB,SAAUC,UACTD,EAAGE,MAAMC,KAAMF,KA6GxBrD,EAAMwD,YAAcC,KAAKC,iBAAmBzD,OAErCD,EA/IO"}